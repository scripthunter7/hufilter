name: Dead Domains Check

env:
  NODE_VERSION: 20

on:
  schedule:
    # Run the job at the first Monday of each month at 8:00 UTC
    - cron: '0 8 1-7 * 1'
  workflow_dispatch:

jobs:
  dead-domains-check:
    name: Run dead domains check
    runs-on: ubuntu-latest
    steps:
      - name: Check out to repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Export dead domains
        run: pnpm dead-domains-linter --export dead-domains.txt

      - name: Remove dead domains from the list
        run: pnpm dead-domains-linter --auto --import dead-domains.txt

      - name: Report dead domains
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const deadDomains = fs.readFileSync('dead-domains.txt', 'utf8').split('\n').filter(Boolean);

            // Add warning to the console
            for (const domain of deadDomains) {
              core.warning(`Possible dead domain: ${domain}`);
            }

            if (deadDomains.length === 0) {
              console.log('No dead domains found.');
              return;
            }

            const titlePrefix = 'Dead domains report for';

            // Close previous issues which have the same title prefix
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            const previousIssues = issues.filter(issue => issue.title.startsWith(titlePrefix));

            for (const previousIssue of previousIssues) {
              console.log(`Closing previous issue #${previousIssue.number}`);
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: previousIssue.number,
                state: 'closed',
              });
            }

            console.log('There are possible dead domains, opening an issue...');

            const title = `${titlePrefix} ${new Date().toLocaleString('default', { month: 'long', year: 'numeric' })}`;

            // Create a new issue
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body: [
                'The following domains are possibly dead:',
                '',
                '<details>',
                '<summary>Click to expand</summary>',
                '',
                `${deadDomains.map(domain => `- ${domain}`).join('\n')}`,
                '',
                '</details>',
                '',
                'Please note that this is an automated report and some low-traffic websites may be incorrectly marked as dead.',
                'For more information, see https://github.com/AdguardTeam/DeadDomainsLinter/blob/master/README.md',
              ].join('\n'),
              labels: ['dead website'],
            });

            console.log(`Created issue #${issue.number}`);

            // Create a new branch from the current one
            const branchName = `fix/dead-domains-${issue.number}`;
            console.log(`Creating a new branch ${branchName}...`);

            // Get the latest commit's tree SHA
            const { data: latestCommit } = await github.rest.git.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
            });

            // Create the new branch
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: context.sha,
            });

            console.log(`Branch ${branchName} created.`);

            // Create a new commit with the changes
            const { data: commit } = await github.rest.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: `Fix dead domains reported in #${issue.number}`,
              tree: latestCommit.tree.sha,
              parents: [context.sha],
            });

            console.log(`Commit ${commit.sha} created.`);

            // Update the branch with the new commit
            console.log('Updating the branch with the new commit...');

            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${branchName}`,
              sha: commit.sha,
            });

            console.log('Branch updated.');

            // Create a pull request
            console.log('Creating a pull request...');

            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Remove dead domains reported in #${issue.number}`,
              head: branchName,
              base: context.ref.replace('refs/heads/', ''),
              body: [
                `This is an automated pull request to resolve #${issue.number}.`,
                'Please review the changes and merge the pull request if everything is correct.',
              ].join('\n'),
            });

            console.log(`Pull request #${pullRequest.number} created.`);
